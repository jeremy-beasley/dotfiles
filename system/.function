# Switch long/short prompt
ps0() {
  unset PROMPT_COMMAND
  PS1='$ '
}

ps1() {
  source "$DOTFILES_DIR"/system/.prompt
}

ps-light() {
 source "$DOTFILES_DIR"/system/.prompt_light
}

# Get named var (usage: get "VAR_NAME")
get() {
  echo "${!1}"
}

# Feature detection
is-macos() { [[ "$OSTYPE" =~ ^darwin ]] || return 1; }

is-executable() {
  type "$1" > /dev/null 2>&1 || return 1;
}

is-supported() {
  if [ $# -eq 1 ]; then
    if eval "$1" > /dev/null 2>&1; then true; else false; fi
  else
    if eval "$1" > /dev/null 2>&1; then
      echo -n "$2"
    else
      echo -n "$3"
    fi
  fi
}

# Add to path
prepend-path() {
  [ -d $1 ] && PATH="$1:$PATH"
}

# Update config file
set-config() {
  local KEY="$1"
  local VALUE="$2"
  local FILE="$3"
  touch "$FILE"
  if grep -q "$1=" "$FILE"; then
    sed "s@$KEY=.*@$KEY=\"$VALUE\"@" -i "$FILE"
  else
    echo "export $KEY=$VALUE" >> "$FILE"
  fi
}

# Show 256 TERM colors
colors() {
  local X=$(tput op)
  local Y=$(printf %$((COLUMNS-6))s)
  for i in {0..256}; do
  o=00$i;
  echo -e ${o:${#o}-3:3} $(tput setaf $i;tput setab $i)${Y// /=}$X;
  done
}

# Calculator
calc() {
  echo "$*" | bc -l;
}

# Weather
meteo() {
  local LOCALE=`echo ${LANG:-en} | cut -c1-2`
  if [ $# -eq 0 ]; then
    local LOCATION=`curl -s ipinfo.io/loc`
  else
    local LOCATION=$1
  fi
  curl -s "$LOCALE.wttr.in/$LOCATION"
}

# Markdown
md() {
  pandoc $1 | lynx -stdin -dump
}

# open repo on Github or Bitbucket
repo() {
	if [ ! -d .git ] ; 
        then echo "ERROR: This isnt a git directory" && return false; 
    fi
    git_url=`git config --get remote.origin.url`

    if [[ $git_url == https://*github* ]]; then
    	url=${git_url%.git}
    elif [[ $git_url == https://*bitbucket* ]]; then
		# remove "x-token-auth@" from middle of string and ".git" from end 
		url=${git_url/x-token-auth@}
		url=${url%.git}
	else
        echo "ERROR: Remote origin is invalid" && return false;
    fi
    open $url	
}

# Attach or create tmux session named the same as the current directory
tat() {
	path_name="$(basename "$PWD" | tr . -)"
	session_name=${1-$path_name}

	not_in_tmux() {
	  [ -z "$TMUX" ]
	}

	session_exists() {
	  tmux list-sessions | sed -E 's/:.*$//' | grep -q "^$session_name$"
	}

	create_detached_session() {
	  (TMUX='' tmux new-session -Ad -s "$session_name")
	}

	create_if_needed_and_attach() {
	  if not_in_tmux; then
	    tmux new-session -As "$session_name"
	  else
	    if ! session_exists; then
	      create_detached_session
	    fi
	    tmux switch-client -t "$session_name"
	  fi
	}

	create_if_needed_and_attach
}

# Open RStudio from the terminal in current directory
rs () {
  if [ -z "$1" ] ; then
    dir="."
  else
    dir="$1"
  fi
  cmd="proj <- list.files('$dir', pattern = '*.Rproj$', full.names = TRUE); if (length(proj) > 0) { system(paste('open -na Rstudio', proj[1])) } else { cat('No .Rproj file found in directory.\n') };"
  Rscript -e "$cmd"
}
